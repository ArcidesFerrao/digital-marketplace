generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String?
  isPremium     Boolean   @default(false)
  balance       Float     @default(0)
  image         String?
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  products           Product[]     @relation("SellerProducts")
  transactionsBought Transaction[] @relation("BuyerTransactions")
  transactionsSold   Transaction[] @relation("SellerTransactions")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  price       Float
  category    String
  description String
  fileUrl     String
  imageUrl    String
  isApproved  Boolean  @default(false)
  sellerId    String
  createdAt   DateTime @default(now())

  seller      User          @relation("SellerProducts", fields: [sellerId], references: [id])
  Transaction Transaction[]
}

model Transaction {
  id        String   @id @default(cuid())
  buyerId   String
  sellerId  String
  productId String
  amount    Float
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation("SellerTransactions", fields: [sellerId], references: [id])
  buyer   User    @relation("BuyerTransactions", fields: [buyerId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  name      String
  lastName  String
  email     String
  subject   String?
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  replied   Boolean  @default(false)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
